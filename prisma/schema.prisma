// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("guest")
  passwordHash  String?
  lastLoginAt   DateTime?
  loginCount    Int       @default(0)
  isActive      Boolean   @default(true)
  profileCompleted Boolean @default(false)
  onboardingCompleted Boolean @default(false)
  timezone      String?
  preferences   String?
  clientId      String?   // Multi-tenant support
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  memberships   Membership[]
  messages      Message[]
  audits        Audit[]
  media         Media[]
  revisions     Revision[]
  bookmarks     Bookmark[]
  interests     UserInterest[]
  viewEvents    ViewEvent[]
  notifications Notification[]
  notificationPreference NotificationPreference?
  hostedEvents  Event[]
  rsvps         RSVP[]
  questions     Question[]
  votes         Vote[]
  signalTrades  SignalTrade[]
  enrollments   Enrollment[]
  lessonProgress LessonProgress[]
  quizSubmissions QuizSubmission[]
  certificates  Certificate[]
  learningSessions LearningSession[]
  cohortEnrollments CohortEnrollment[]
  videos        Video[]
  videoViews    VideoView[]
  securityEvents SecurityEvent[]
  userSessions  UserSession[]
  client        Client?   @relation(fields: [clientId], references: [id], onDelete: SetNull)

  @@index([email])
  @@index([role])
  @@index([isActive])
  @@index([createdAt])
  @@index([lastLoginAt])
  @@index([clientId])
}

model Client {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  domain      String?  // Custom domain for client
  settings    String?  // JSON string for client-specific settings
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users       User[]

  @@index([slug])
  @@index([isActive])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model SecurityEvent {
  id        String   @id @default(cuid())
  userId    String
  eventType String
  ipAddress String?
  userAgent String?
  success   Boolean
  metadata  String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String
  sessionToken String   @unique
  deviceInfo   String?
  ipAddress    String?
  lastActivity DateTime @default(now())
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Membership {
  id        String   @id @default(cuid())
  userId    String
  tier      String
  status    String   @default("trial")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Content {
  id          String   @id @default(cuid())
  slug        String   @unique
  kind        String
  title       String
  excerpt     String?
  body        String?
  coverUrl    String?
  publishedAt DateTime @default(now())
  publishAt   DateTime?
  locked      Boolean  @default(false)
  minTier     String?
  tags        String   // JSON string array
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  revisions Revision[]
  bookmarks Bookmark[]
  videos    Video[]
}

model Episode {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  excerpt     String?
  videoUrl    String?
  body        String?
  coverUrl    String?
  publishedAt DateTime @default(now())
  publishAt   DateTime?
  locked      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookmarks Bookmark[]
}

model Channel {
  id          String    @id @default(cuid())
  slug        String    @unique
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  messages Message[]
}

model Message {
  id        String    @id @default(cuid())
  channelId String
  userId    String
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  channel Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Audit {
  id         String   @id @default(cuid())
  actorId    String
  action     String
  subjectType String
  subjectId  String?
  metadata   String?  // JSON string for additional data
  createdAt  DateTime @default(now())

  actor User @relation(fields: [actorId], references: [id], onDelete: Cascade)
}

model Media {
  id          String   @id @default(cuid())
  url         String
  filename    String
  mime        String
  size        Int
  alt         String?
  title       String?
  uploadedById String
  createdAt   DateTime @default(now())

  uploader User @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
}

model Revision {
  id        String   @id @default(cuid())
  contentId String
  editorId  String
  title     String
  excerpt   String?
  body      String?
  coverUrl  String?
  createdAt DateTime @default(now())

  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  editor  User    @relation(fields: [editorId], references: [id], onDelete: Cascade)
}

// Note: SQLite doesn't support enums, using String fields with validation in application code
// Valid values:
// UserRole: "guest", "member", "editor", "admin"
// MembershipTier: "T1", "T2", "T3"  
// MembershipStatus: "active", "trial", "paused"
// ContentKind: "research", "macro", "signal", "resource"

// Member Experience v1 Models

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  // Only one of these will be set:
  contentId String?  // Research/Resource/Signal content
  episodeId String?  // Crypto Compass episode
  note      String?
  createdAt DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content  Content? @relation(fields: [contentId], references: [id], onDelete: Cascade)
  episode  Episode? @relation(fields: [episodeId], references: [id], onDelete: Cascade)

  @@index([userId, contentId])
  @@index([userId, episodeId])
}

model UserInterest {
  id        String   @id @default(cuid())
  userId    String
  tag       String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tag])
}

model ViewEvent {
  id         String   @id @default(cuid())
  userId     String
  entityType String   // 'content' | 'episode'
  entityId   String
  createdAt  DateTime @default(now())
  // optional dwell time if we ever send it:
  durationMs Int?     

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, entityType, entityId])
  @@index([userId, entityType, entityId, createdAt])
}

model NotificationPreference {
  userId     String  @id
  // channels
  inApp      Boolean @default(true)
  email      Boolean @default(false)
  // events
  onResearch Boolean @default(true)
  onEpisode  Boolean @default(true)
  onSignal   Boolean @default(true)
  onMention  Boolean @default(true)
  onReply    Boolean @default(true)
  // digest
  digestEnabled  Boolean @default(false)
  digestFreq     String  @default("weekly") // 'daily' | 'weekly'
  digestHourUTC  Int     @default(9)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Notification {
  id         String   @id @default(cuid())
  userId     String
  type       String   // 'research_published' | 'episode_published' | 'signal_published' | 'mention' | 'reply' | 'announcement'
  entityType String?  // 'content' | 'episode' | 'message'
  entityId   String?
  title      String
  body       String?
  url        String?
  channel    String   // 'inapp' | 'email' | 'push'
  readAt     DateTime?
  sentAt     DateTime?
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([userId, readAt])
}

// Live Sessions & Events v1 Models

model Event {
  id           String   @id @default(cuid())
  slug         String   @unique
  title        String
  summary      String?
  description  String?  // MDX allowed
  startAt      DateTime
  endAt        DateTime
  timezone     String   // IANA, e.g., "Australia/Sydney"
  visibility   String   @default("member") // 'public' | 'member' | 'admin'
  locationType String   @default("online") // 'online' | 'in_person'
  locationText String?  // address or "Zoom"
  joinUrl      String?  // meeting link (shown near start time)
  capacity     Int?
  hostUserId   String?
  recordingUrl String?  // after event
  resources    String?  // JSON string for [{title,url}] after event
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  host         User?    @relation(fields: [hostUserId], references: [id], onDelete: SetNull)
  rsvps        RSVP[]
  questions    Question[]
  chapters     Chapter[]
  transcript   Transcript?

  @@index([startAt])
  @@index([visibility, startAt])
}

model RSVP {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  status    String   @default("going") // 'going' | 'interested' | 'declined'
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  checkedInAt DateTime?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  event  Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([eventId, status])
}

model Question {
  id         String   @id @default(cuid())
  eventId    String
  userId     String
  body       String
  createdAt  DateTime @default(now())
  answeredAt DateTime?
  answer     String?
  answeredBy String?
  archivedAt DateTime?

  event  Event @relation(fields: [eventId], references: [id])
  user   User  @relation(fields: [userId], references: [id])
  votes  Vote[]

  @@index([eventId, createdAt])
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  questionId String
  createdAt DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  question Question @relation(fields: [questionId], references: [id])

  @@unique([userId, questionId])
}

model Transcript {
  id         String   @id @default(cuid())
  eventId    String   @unique
  source     String   @default("manual") // 'manual' | 'vtt' | 'srt'
  createdAt  DateTime @default(now())
  uploadedBy String?

  event Event @relation(fields: [eventId], references: [id])
  segments TranscriptSegment[]
}

model TranscriptSegment {
  id           String   @id @default(cuid())
  transcriptId String
  startMs      Int
  endMs        Int?
  text         String

  transcript Transcript @relation(fields: [transcriptId], references: [id])

  @@index([transcriptId, startMs])
}

model Chapter {
  id        String   @id @default(cuid())
  eventId   String
  title     String
  startMs   Int
  createdAt DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id])

  @@index([eventId, startMs])
}

model SignalTrade {
  id           String   @id @default(cuid())
  slug         String   @unique
  symbol       String   // e.g., BTC, ETH
  market       String   @default("crypto:spot") // 'crypto:spot' | 'crypto:perp' | ...
  direction    String   // 'long' | 'short'
  thesis       String?  // MDX supported
  tags         String   @default("[]") // JSON string array

  entryTime    DateTime
  entryPrice   Decimal
  stopLoss     Decimal?
  takeProfit   Decimal?
  conviction   Int?     // 1-5
  riskPct      Decimal? // % of portfolio risked

  status       String   @default("open") // 'open' | 'closed'
  exitTime     DateTime?
  exitPrice    Decimal?
  notes        String?

  createdById  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  createdBy    User?    @relation(fields:[createdById], references:[id])

  @@index([status, symbol, entryTime])
  @@index([createdAt])
  @@index([tags])
}

model PortfolioSetting {
  id              String  @id @default(cuid())
  // Global backtest-like params to compute equity curve from trades
  baseCapitalUsd  Decimal // e.g., 10000.00
  positionModel   String  @default("risk_pct") // 'risk_pct' | 'fixed_fraction'
  slippageBps     Int     @default(5)  // 0.05%
  feeBps          Int     @default(10) // 0.10%
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model PerfSnapshot {
  id        String   @id @default(cuid())
  scope     String   // 'ALL'|'YTD'|'1Y'|'90D' and/or a date range key
  hash      String   // hash of trades + settings for cache key
  payload   String   // JSON string of precomputed KPIs + series (equity, drawdown, heatmap bins)
  createdAt DateTime @default(now())

  @@index([scope, hash])
  @@index([createdAt])
}

model Track {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  summary     String?
  coverUrl    String?
  minTier     String   @default("member") // member | editor | admin
  description String?  // MDX
  publishedAt DateTime?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  sections      TrackSection[]
  lessons       Lesson[]
  enrollments   Enrollment[]
  certificates  Certificate[]
  cohorts       Cohort[]
  
  @@index([publishedAt, order])
}

model TrackSection {
  id        String  @id @default(cuid())
  trackId   String
  title     String
  summary   String?
  order     Int     @default(0)
  
  track     Track   @relation(fields: [trackId], references: [id], onDelete: Cascade)
  lessons   Lesson[]

  @@index([trackId, order])
}

model Lesson {
  id          String   @id @default(cuid())
  trackId     String
  sectionId   String?
  slug        String
  title       String
  contentMDX  String   // source MDX
  durationMin Int?     // estimated
  videoUrl    String?
  resources   String?  // JSON string array of {title,url}
  quizId      String?
  publishedAt DateTime?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  track       Track         @relation(fields: [trackId], references: [id], onDelete: Cascade)
  section     TrackSection? @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  quiz        Quiz?
  progresses  LessonProgress[]
  quizSubmissions QuizSubmission[]
  releases    LessonRelease[]
  videos      Video[]
  learningSessions LearningSession[]

  @@unique([trackId, slug])
  @@index([trackId, sectionId, order])
  @@index([publishedAt])
}

model Enrollment {
  id          String   @id @default(cuid())
  userId      String
  trackId     String
  startedAt   DateTime @default(now())
  completedAt DateTime?
  progressPct Int      @default(0)

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([userId, trackId])
}

model LessonProgress {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  completedAt DateTime?
  timeSpentMs Int      @default(0)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model Quiz {
  id        String @id @default(cuid())
  lessonId  String @unique
  passPct   Int    @default(70) // 70% to pass
  questions String // JSON string array of {id, kind:'mc', prompt, options:[...], correctIndexes:[...]}

  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model QuizSubmission {
  id        String   @id @default(cuid())
  userId    String
  lessonId  String
  scorePct  Int
  passed    Boolean
  answers   String   // JSON string array of {qId, selectedIndexes:[...]}
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@index([userId, lessonId, createdAt])
}

model Certificate {
  id        String   @id @default(cuid())
  userId    String
  trackId   String
  code      String   @unique // shareable code
  issuedAt  DateTime @default(now())
  meta      String?  // JSON string

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  track Track @relation(fields: [trackId], references: [id], onDelete: Cascade)

  @@unique([userId, trackId])
  @@index([code])
}

model LearningSession {
  id          String   @id @default(cuid())
  userId      String
  lessonId    String
  startTime   DateTime
  endTime     DateTime?
  timeSpentMs Int      @default(0)
  sessionType String   @default("lesson") // lesson | quiz | review
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@index([userId, startTime])
  @@index([lessonId, startTime])
}

model Cohort {
  id          String   @id @default(cuid())
  trackId     String
  slug        String   @unique
  title       String
  description String?
  startsAt    DateTime
  endsAt      DateTime?
  timezone    String   @default("Australia/Sydney") // IANA timezone
  visibility  String   @default("member") // member | admin
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  track       Track            @relation(fields: [trackId], references: [id], onDelete: Cascade)
  enrollments CohortEnrollment[]
  releases    LessonRelease[]

  @@index([trackId, startsAt])
  @@index([visibility])
}

model CohortEnrollment {
  id        String   @id @default(cuid())
  cohortId  String
  userId    String
  joinedAt  DateTime @default(now())
  role      String   @default("member") // member | coach

  cohort Cohort @relation(fields: [cohortId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([cohortId, userId])
  @@index([cohortId])
  @@index([userId])
}

model LessonRelease {
  id        String   @id @default(cuid())
  cohortId  String
  lessonId  String
  releaseAt DateTime // when this lesson becomes visible for this cohort

  cohort Cohort @relation(fields: [cohortId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([cohortId, lessonId])
  @@index([cohortId, releaseAt])
  @@index([releaseAt])
}

model Video {
  id          String    @id @default(cuid())
  title       String
  description String?
  filename    String    // Original uploaded filename
  filePath    String    // Path to video file on disk
  thumbnail   String?   // Path to thumbnail image
  duration    Int?      // Duration in seconds
  fileSize    Int?      // File size in bytes
  mimeType    String    @default("video/mp4")
  resolution  String?   // e.g., "1920x1080"
  status      String    @default("processing") // processing | ready | error
  visibility  String    @default("member") // member | admin | public
  uploadedBy  String    // User ID who uploaded
  contentId   String?   // Optional link to content piece
  lessonId    String?   // Optional link to lesson
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relationships
  uploader    User      @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  content     Content?  @relation(fields: [contentId], references: [id], onDelete: SetNull)
  lesson      Lesson?   @relation(fields: [lessonId], references: [id], onDelete: SetNull)
  views       VideoView[]

  @@index([uploadedBy])
  @@index([status])
  @@index([visibility])
  @@index([createdAt])
}

model VideoView {
  id        String   @id @default(cuid())
  videoId   String
  userId    String?
  viewedAt  DateTime @default(now())
  duration  Int?     // How long they watched (in seconds)
  completed Boolean  @default(false) // Did they watch the whole video?

  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([videoId])
  @@index([userId])
  @@index([viewedAt])
}